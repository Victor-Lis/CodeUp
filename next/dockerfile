  # ==============================================================================
  # Estágio Base: Configura o ambiente Node.js e pnpm
  # ==============================================================================
  FROM node:22-alpine AS base
  # Instala dependências do SO para compilar pacotes nativos
  RUN apk add --no-cache libc6-compat g++ make py3-pip
  # Instala o pnpm globalmente
  RUN npm install -g pnpm
  # Define o diretório de trabalho
  WORKDIR /app

  # ==============================================================================
  # Estágio de Desenvolvimento (dev) - Otimizado para hot-reload
  # ==============================================================================
  FROM base AS dev
  ENV NODE_ENV=development
  # Copia apenas os arquivos de manifesto para aproveitar o cache do Docker
  COPY package.json pnpm-lock.yaml* ./
  # Instala TODAS as dependências (incluindo devDependencies)
  RUN pnpm install
  # Copia o resto do código (será sobreposto pelo volume do docker-compose)
  COPY . .
  # Expõe a porta e define o comando padrão para desenvolvimento
  EXPOSE 3000
  CMD ["pnpm", "dev"]

  # ==============================================================================
  # Estágio Builder: Instala dependências e constrói a aplicação para produção
  # ==============================================================================
  FROM base AS builder
  # Copia os arquivos de manifesto de pacote
  COPY package.json pnpm-lock.yaml* ./
  # Instala TODAS as dependências necessárias para o build (inclui devDependencies)
  RUN pnpm install
  # Agora copia o resto do código fonte
  COPY . .
  # Executa o build da aplicação
  RUN pnpm run build

  # ==============================================================================
  # Estágio de Produção (production) - Imagem final, leve e segura
  # ==============================================================================
  FROM base AS production
  WORKDIR /app
  ENV NODE_ENV=production

  # Copia os arquivos de manifesto de pacote novamente
  COPY package.json pnpm-lock.yaml* ./
  # Instala SOMENTE as dependências de produção para uma imagem final menor
  RUN pnpm install --prod

  # Cria um usuário não-root por segurança
  RUN addgroup -g 1001 -S nodejs && adduser -S nextjs -u 1001

  # Copia os artefatos do build e arquivos necessários do estágio 'builder'
  COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
  COPY --from=builder --chown=nextjs:nodejs /app/public ./public
  COPY --from=builder --chown=nextjs:nodejs /app/package.json ./package.json

  # Define o usuário não-root para executar a aplicação
  USER nextjs

  EXPOSE 3000
  # CMD ["pnpm", "start"]