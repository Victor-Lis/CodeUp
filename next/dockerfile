  # ==============================================================================
  # Estágio Base: Configura o ambiente Node.js e pnpm
  # ==============================================================================
  FROM node:22-alpine AS base
  # Instala dependências do SO para compilar pacotes nativos
  RUN apk add --no-cache libc6-compat g++ make py3-pip curl nano
  
  # Instala o pnpm globalmente
  RUN npm install -g pnpm
  # Define o diretório de trabalho
  WORKDIR /app

  
  # ==============================================================================
  # Estágio de Desenvolvimento (dev) - Otimizado para hot-reload
  # ==============================================================================
  FROM base AS dev

  # Recebe os argumentos de build passados pelo docker-compose
  ARG NEXTAUTH_SECRET
  ARG NEXTAUTH_URL
  ARG NEXT_PUBLIC_API_URL 
  ARG NEXT_PUBLIC_API_BASE_URL
  ARG API_URL
  ARG NEXT_PUBLIC_VALIDATOR_API_URL

  # Expõe os argumentos como variáveis de ambiente
  ENV NEXTAUTH_SECRET=$NEXTAUTH_SECRET
  ENV NEXTAUTH_URL=$NEXTAUTH_URL
  ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
  ENV NEXT_PUBLIC_API_BASE_URL=$NEXT_PUBLIC_API_BASE_URL
  ENV API_URL=$API_URL
  ENV NEXT_PUBLIC_VALIDATOR_API_URL=$NEXT_PUBLIC_VALIDATOR_API_URL

  # Copia os ficheiros de manifesto de pacote primeiro para aproveitar o cache do Docker
  COPY package.json pnpm-lock.yaml* ./

  # Instala as dependências
  RUN pnpm install

  # Agora copia o resto do código fonte
  COPY . .

  EXPOSE 3001

  # Comando padrão para iniciar o servidor de desenvolvimento
  CMD ["pnpm", "dev"]

  # ==============================================================================
  # Estágio Builder: Instala dependências e constrói a aplicação para produção
  # ==============================================================================
  FROM base AS builder

  # Recebe os argumentos de build passados pelo docker-compose
  ARG NEXTAUTH_SECRET
  ARG NEXTAUTH_URL
  ARG NEXT_PUBLIC_API_URL 
  ARG NEXT_PUBLIC_API_BASE_URL
  ARG API_URL
  ARG NEXT_PUBLIC_VALIDATOR_API_URL

  # Expõe os argumentos como variáveis de ambiente para o comando RUN abaixo
  
  ENV NEXTAUTH_SECRET=$NEXTAUTH_SECRET
  ENV NEXTAUTH_URL=$NEXTAUTH_URL
  ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
  ENV NEXT_PUBLIC_API_BASE_URL=$NEXT_PUBLIC_API_BASE_URL
  ENV API_URL=$API_URL
  ENV NEXT_PUBLIC_VALIDATOR_API_URL=$NEXT_PUBLIC_VALIDATOR_API_URL

  # Copia os arquivos de manifesto de pacote
  COPY package.json pnpm-lock.yaml* ./
  # Instala TODAS as dependências necessárias para o build (inclui devDependencies)
  # RUN npm install -g pnpm
  RUN pnpm install
  # Agora copia o resto do código fonte
  COPY . /app
  # Executa o build da aplicação
  RUN pnpm run build

  # ==============================================================================
  # Estágio de Produção (production) - Imagem final, leve e segura
  # ==============================================================================
  FROM builder AS production
  WORKDIR /app
  ENV NODE_ENV=production

  # Copia os arquivos de manifesto de pacote novamente
  COPY package.json pnpm-lock.yaml* ./
  # Instala SOMENTE as dependências de produção para uma imagem final menor
  RUN pnpm install --prod

  # Cria um usuário não-root por segurança
  RUN addgroup -g 1001 -S nodejs && adduser -S nextjs -u 1001

  # Copia os artefatos do build e arquivos necessários do estágio 'builder'
  COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
  COPY --from=builder --chown=nextjs:nodejs /app/public ./public
  COPY --from=builder --chown=nextjs:nodejs /app/package.json ./package.json

  # Define o usuário não-root para executar a aplicação
  USER nextjs

  EXPOSE 3000
  # CMD ["pnpm", "start"]